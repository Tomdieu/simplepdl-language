/*
 * generated by Xtext 2.31.0
 */
package simplepdl.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import simplepdl.xtext.ide.contentassist.antlr.internal.InternalSimplePDLParser;
import simplepdl.xtext.services.SimplePDLGrammarAccess;

public class SimplePDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SimplePDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SimplePDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getResourceAccess().getAlternatives(), "rule__Resource__Alternatives");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getAlternatives(), "rule__WorkSequenceType__Alternatives");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_3(), "rule__Process__Group_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup(), "rule__WorkDefinition__Group__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_3(), "rule__WorkDefinition__Group_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_6(), "rule__WorkDefinition__Group_6__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_7(), "rule__WorkDefinition__Group_7__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_8(), "rule__WorkDefinition__Group_8__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_8_2(), "rule__WorkDefinition__Group_8_2__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_9(), "rule__WorkDefinition__Group_9__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_9_2(), "rule__WorkDefinition__Group_9_2__0");
			builder.put(grammarAccess.getWorkSequenceAccess().getGroup(), "rule__WorkSequence__Group__0");
			builder.put(grammarAccess.getRequiredMaterialAccess().getGroup(), "rule__RequiredMaterial__Group__0");
			builder.put(grammarAccess.getRequiredMaterialAccess().getGroup_3(), "rule__RequiredMaterial__Group_3__0");
			builder.put(grammarAccess.getHumanAccess().getGroup(), "rule__Human__Group__0");
			builder.put(grammarAccess.getMaterialAccess().getGroup(), "rule__Material__Group__0");
			builder.put(grammarAccess.getModelAccess().getProcessesAssignment(), "rule__Model__ProcessesAssignment");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getDescriptionAssignment_3_1(), "rule__Process__DescriptionAssignment_3_1");
			builder.put(grammarAccess.getProcessAccess().getWorkdefinitionsAssignment_4(), "rule__Process__WorkdefinitionsAssignment_4");
			builder.put(grammarAccess.getProcessAccess().getWorksequencesAssignment_5(), "rule__Process__WorksequencesAssignment_5");
			builder.put(grammarAccess.getProcessAccess().getResourcesAssignment_6(), "rule__Process__ResourcesAssignment_6");
			builder.put(grammarAccess.getWorkDefinitionAccess().getNameAssignment_1(), "rule__WorkDefinition__NameAssignment_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getDescriptionAssignment_3_1(), "rule__WorkDefinition__DescriptionAssignment_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getAssignedToAssignment_5(), "rule__WorkDefinition__AssignedToAssignment_5");
			builder.put(grammarAccess.getWorkDefinitionAccess().getAssignedToAssignment_6_1(), "rule__WorkDefinition__AssignedToAssignment_6_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getRequiredMaterialsAssignment_7_1(), "rule__WorkDefinition__RequiredMaterialsAssignment_7_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getPredecessorAssignment_8_1(), "rule__WorkDefinition__PredecessorAssignment_8_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getPredecessorAssignment_8_2_1(), "rule__WorkDefinition__PredecessorAssignment_8_2_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getPredTypeAssignment_8_6(), "rule__WorkDefinition__PredTypeAssignment_8_6");
			builder.put(grammarAccess.getWorkDefinitionAccess().getSuccessorAssignment_9_1(), "rule__WorkDefinition__SuccessorAssignment_9_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getSuccessorAssignment_9_2_1(), "rule__WorkDefinition__SuccessorAssignment_9_2_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getSuccTypeAssignment_9_6(), "rule__WorkDefinition__SuccTypeAssignment_9_6");
			builder.put(grammarAccess.getWorkSequenceAccess().getNameAssignment_1(), "rule__WorkSequence__NameAssignment_1");
			builder.put(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_4(), "rule__WorkSequence__PredecessorAssignment_4");
			builder.put(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_6(), "rule__WorkSequence__SuccessorAssignment_6");
			builder.put(grammarAccess.getWorkSequenceAccess().getTypeAssignment_8(), "rule__WorkSequence__TypeAssignment_8");
			builder.put(grammarAccess.getRequiredMaterialAccess().getMaterialAssignment_2(), "rule__RequiredMaterial__MaterialAssignment_2");
			builder.put(grammarAccess.getRequiredMaterialAccess().getQuantityAssignment_3_2(), "rule__RequiredMaterial__QuantityAssignment_3_2");
			builder.put(grammarAccess.getHumanAccess().getNameAssignment_1(), "rule__Human__NameAssignment_1");
			builder.put(grammarAccess.getHumanAccess().getEmailAssignment_4(), "rule__Human__EmailAssignment_4");
			builder.put(grammarAccess.getHumanAccess().getRoleAssignment_6(), "rule__Human__RoleAssignment_6");
			builder.put(grammarAccess.getMaterialAccess().getNameAssignment_1(), "rule__Material__NameAssignment_1");
			builder.put(grammarAccess.getMaterialAccess().getUnitAssignment_4(), "rule__Material__UnitAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SimplePDLGrammarAccess grammarAccess;

	@Override
	protected InternalSimplePDLParser createParser() {
		InternalSimplePDLParser result = new InternalSimplePDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimplePDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimplePDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
