/*
 * generated by Xtext 2.31.0
 */
package simplepdl.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import simplepdl.xtext.services.SimplePDLGrammarAccess;
import simplepdl.xtext.simplePDL.Human;
import simplepdl.xtext.simplePDL.Material;
import simplepdl.xtext.simplePDL.Model;
import simplepdl.xtext.simplePDL.RequiredMaterial;
import simplepdl.xtext.simplePDL.SimplePDLPackage;
import simplepdl.xtext.simplePDL.WorkDefinition;
import simplepdl.xtext.simplePDL.WorkSequence;

@SuppressWarnings("all")
public class SimplePDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimplePDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimplePDLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimplePDLPackage.HUMAN:
				sequence_Human(context, (Human) semanticObject); 
				return; 
			case SimplePDLPackage.MATERIAL:
				sequence_Material(context, (Material) semanticObject); 
				return; 
			case SimplePDLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SimplePDLPackage.PROCESS:
				sequence_Process(context, (simplepdl.xtext.simplePDL.Process) semanticObject); 
				return; 
			case SimplePDLPackage.REQUIRED_MATERIAL:
				sequence_RequiredMaterial(context, (RequiredMaterial) semanticObject); 
				return; 
			case SimplePDLPackage.WORK_DEFINITION:
				sequence_WorkDefinition(context, (WorkDefinition) semanticObject); 
				return; 
			case SimplePDLPackage.WORK_SEQUENCE:
				sequence_WorkSequence(context, (WorkSequence) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Resource returns Human
	 *     Human returns Human
	 *
	 * Constraint:
	 *     (name=ID email=STRING role=STRING)
	 * </pre>
	 */
	protected void sequence_Human(ISerializationContext context, Human semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.RESOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.RESOURCE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.HUMAN__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.HUMAN__EMAIL));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.HUMAN__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.HUMAN__ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHumanAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHumanAccess().getEmailSTRINGTerminalRuleCall_4_0(), semanticObject.getEmail());
		feeder.accept(grammarAccess.getHumanAccess().getRoleSTRINGTerminalRuleCall_6_0(), semanticObject.getRole());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Resource returns Material
	 *     Material returns Material
	 *
	 * Constraint:
	 *     (name=ID unit=STRING)
	 * </pre>
	 */
	protected void sequence_Material(ISerializationContext context, Material semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.RESOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.RESOURCE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.MATERIAL__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.MATERIAL__UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaterialAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMaterialAccess().getUnitSTRINGTerminalRuleCall_4_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     processes+=Process+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=ID description=STRING? workdefinitions+=WorkDefinition* worksequences+=WorkSequence* resources+=Resource*)
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, simplepdl.xtext.simplePDL.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequiredMaterial returns RequiredMaterial
	 *
	 * Constraint:
	 *     (material=[Material|ID] quantity=INT?)
	 * </pre>
	 */
	protected void sequence_RequiredMaterial(ISerializationContext context, RequiredMaterial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkDefinition returns WorkDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         assignedTo+=[Human|ID] 
	 *         assignedTo+=[Human|ID]* 
	 *         requiredMaterials+=RequiredMaterial* 
	 *         (predecessor+=[WorkDefinition|ID] predecessor+=[WorkDefinition|ID]* predType=WorkSequenceType)? 
	 *         (successor+=[WorkDefinition|ID] successor+=[WorkDefinition|ID]* succType=WorkSequenceType)?
	 *     )
	 * </pre>
	 */
	protected void sequence_WorkDefinition(ISerializationContext context, WorkDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkSequence returns WorkSequence
	 *
	 * Constraint:
	 *     (name=ID predecessor=[WorkDefinition|ID] successor=[WorkDefinition|ID] type=WorkSequenceType)
	 * </pre>
	 */
	protected void sequence_WorkSequence(ISerializationContext context, WorkSequence semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__PREDECESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__PREDECESSOR));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__SUCCESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__SUCCESSOR));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkSequenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(SimplePDLPackage.Literals.WORK_SEQUENCE__PREDECESSOR, false));
		feeder.accept(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionIDTerminalRuleCall_6_0_1(), semanticObject.eGet(SimplePDLPackage.Literals.WORK_SEQUENCE__SUCCESSOR, false));
		feeder.accept(grammarAccess.getWorkSequenceAccess().getTypeWorkSequenceTypeEnumRuleCall_8_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
