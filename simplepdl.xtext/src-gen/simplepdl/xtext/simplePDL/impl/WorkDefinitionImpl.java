/**
 * generated by Xtext 2.31.0
 */
package simplepdl.xtext.simplePDL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import simplepdl.xtext.simplePDL.Human;
import simplepdl.xtext.simplePDL.RequiredMaterial;
import simplepdl.xtext.simplePDL.SimplePDLPackage;
import simplepdl.xtext.simplePDL.WorkDefinition;
import simplepdl.xtext.simplePDL.WorkSequenceType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Work Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getAssignedTo <em>Assigned To</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getRequiredMaterials <em>Required Materials</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getPredecessor <em>Predecessor</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getPredType <em>Pred Type</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getSuccessor <em>Successor</em>}</li>
 *   <li>{@link simplepdl.xtext.simplePDL.impl.WorkDefinitionImpl#getSuccType <em>Succ Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WorkDefinitionImpl extends MinimalEObjectImpl.Container implements WorkDefinition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssignedTo() <em>Assigned To</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignedTo()
   * @generated
   * @ordered
   */
  protected EList<Human> assignedTo;

  /**
   * The cached value of the '{@link #getRequiredMaterials() <em>Required Materials</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiredMaterials()
   * @generated
   * @ordered
   */
  protected EList<RequiredMaterial> requiredMaterials;

  /**
   * The cached value of the '{@link #getPredecessor() <em>Predecessor</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredecessor()
   * @generated
   * @ordered
   */
  protected EList<WorkDefinition> predecessor;

  /**
   * The default value of the '{@link #getPredType() <em>Pred Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredType()
   * @generated
   * @ordered
   */
  protected static final WorkSequenceType PRED_TYPE_EDEFAULT = WorkSequenceType.START_TO_START;

  /**
   * The cached value of the '{@link #getPredType() <em>Pred Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredType()
   * @generated
   * @ordered
   */
  protected WorkSequenceType predType = PRED_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSuccessor() <em>Successor</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuccessor()
   * @generated
   * @ordered
   */
  protected EList<WorkDefinition> successor;

  /**
   * The default value of the '{@link #getSuccType() <em>Succ Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuccType()
   * @generated
   * @ordered
   */
  protected static final WorkSequenceType SUCC_TYPE_EDEFAULT = WorkSequenceType.START_TO_START;

  /**
   * The cached value of the '{@link #getSuccType() <em>Succ Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuccType()
   * @generated
   * @ordered
   */
  protected WorkSequenceType succType = SUCC_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimplePDLPackage.Literals.WORK_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplePDLPackage.WORK_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplePDLPackage.WORK_DEFINITION__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Human> getAssignedTo()
  {
    if (assignedTo == null)
    {
      assignedTo = new EObjectResolvingEList<Human>(Human.class, this, SimplePDLPackage.WORK_DEFINITION__ASSIGNED_TO);
    }
    return assignedTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RequiredMaterial> getRequiredMaterials()
  {
    if (requiredMaterials == null)
    {
      requiredMaterials = new EObjectContainmentEList<RequiredMaterial>(RequiredMaterial.class, this, SimplePDLPackage.WORK_DEFINITION__REQUIRED_MATERIALS);
    }
    return requiredMaterials;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<WorkDefinition> getPredecessor()
  {
    if (predecessor == null)
    {
      predecessor = new EObjectResolvingEList<WorkDefinition>(WorkDefinition.class, this, SimplePDLPackage.WORK_DEFINITION__PREDECESSOR);
    }
    return predecessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkSequenceType getPredType()
  {
    return predType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredType(WorkSequenceType newPredType)
  {
    WorkSequenceType oldPredType = predType;
    predType = newPredType == null ? PRED_TYPE_EDEFAULT : newPredType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplePDLPackage.WORK_DEFINITION__PRED_TYPE, oldPredType, predType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<WorkDefinition> getSuccessor()
  {
    if (successor == null)
    {
      successor = new EObjectResolvingEList<WorkDefinition>(WorkDefinition.class, this, SimplePDLPackage.WORK_DEFINITION__SUCCESSOR);
    }
    return successor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkSequenceType getSuccType()
  {
    return succType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuccType(WorkSequenceType newSuccType)
  {
    WorkSequenceType oldSuccType = succType;
    succType = newSuccType == null ? SUCC_TYPE_EDEFAULT : newSuccType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimplePDLPackage.WORK_DEFINITION__SUCC_TYPE, oldSuccType, succType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimplePDLPackage.WORK_DEFINITION__REQUIRED_MATERIALS:
        return ((InternalEList<?>)getRequiredMaterials()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimplePDLPackage.WORK_DEFINITION__NAME:
        return getName();
      case SimplePDLPackage.WORK_DEFINITION__DESCRIPTION:
        return getDescription();
      case SimplePDLPackage.WORK_DEFINITION__ASSIGNED_TO:
        return getAssignedTo();
      case SimplePDLPackage.WORK_DEFINITION__REQUIRED_MATERIALS:
        return getRequiredMaterials();
      case SimplePDLPackage.WORK_DEFINITION__PREDECESSOR:
        return getPredecessor();
      case SimplePDLPackage.WORK_DEFINITION__PRED_TYPE:
        return getPredType();
      case SimplePDLPackage.WORK_DEFINITION__SUCCESSOR:
        return getSuccessor();
      case SimplePDLPackage.WORK_DEFINITION__SUCC_TYPE:
        return getSuccType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimplePDLPackage.WORK_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__ASSIGNED_TO:
        getAssignedTo().clear();
        getAssignedTo().addAll((Collection<? extends Human>)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__REQUIRED_MATERIALS:
        getRequiredMaterials().clear();
        getRequiredMaterials().addAll((Collection<? extends RequiredMaterial>)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__PREDECESSOR:
        getPredecessor().clear();
        getPredecessor().addAll((Collection<? extends WorkDefinition>)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__PRED_TYPE:
        setPredType((WorkSequenceType)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__SUCCESSOR:
        getSuccessor().clear();
        getSuccessor().addAll((Collection<? extends WorkDefinition>)newValue);
        return;
      case SimplePDLPackage.WORK_DEFINITION__SUCC_TYPE:
        setSuccType((WorkSequenceType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimplePDLPackage.WORK_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SimplePDLPackage.WORK_DEFINITION__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case SimplePDLPackage.WORK_DEFINITION__ASSIGNED_TO:
        getAssignedTo().clear();
        return;
      case SimplePDLPackage.WORK_DEFINITION__REQUIRED_MATERIALS:
        getRequiredMaterials().clear();
        return;
      case SimplePDLPackage.WORK_DEFINITION__PREDECESSOR:
        getPredecessor().clear();
        return;
      case SimplePDLPackage.WORK_DEFINITION__PRED_TYPE:
        setPredType(PRED_TYPE_EDEFAULT);
        return;
      case SimplePDLPackage.WORK_DEFINITION__SUCCESSOR:
        getSuccessor().clear();
        return;
      case SimplePDLPackage.WORK_DEFINITION__SUCC_TYPE:
        setSuccType(SUCC_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimplePDLPackage.WORK_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SimplePDLPackage.WORK_DEFINITION__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case SimplePDLPackage.WORK_DEFINITION__ASSIGNED_TO:
        return assignedTo != null && !assignedTo.isEmpty();
      case SimplePDLPackage.WORK_DEFINITION__REQUIRED_MATERIALS:
        return requiredMaterials != null && !requiredMaterials.isEmpty();
      case SimplePDLPackage.WORK_DEFINITION__PREDECESSOR:
        return predecessor != null && !predecessor.isEmpty();
      case SimplePDLPackage.WORK_DEFINITION__PRED_TYPE:
        return predType != PRED_TYPE_EDEFAULT;
      case SimplePDLPackage.WORK_DEFINITION__SUCCESSOR:
        return successor != null && !successor.isEmpty();
      case SimplePDLPackage.WORK_DEFINITION__SUCC_TYPE:
        return succType != SUCC_TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(", predType: ");
    result.append(predType);
    result.append(", succType: ");
    result.append(succType);
    result.append(')');
    return result.toString();
  }

} //WorkDefinitionImpl
