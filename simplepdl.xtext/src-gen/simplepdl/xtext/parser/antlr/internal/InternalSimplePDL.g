/*
 * generated by Xtext 2.31.0
 */
grammar InternalSimplePDL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package simplepdl.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package simplepdl.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import simplepdl.xtext.services.SimplePDLGrammarAccess;

}

@parser::members {

 	private SimplePDLGrammarAccess grammarAccess;

    public InternalSimplePDLParser(TokenStream input, SimplePDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SimplePDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_0());
			}
			lv_processes_0_0=ruleProcess
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"processes",
					lv_processes_0_0,
					"simplepdl.xtext.SimplePDL.Process");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	iv_ruleProcess=ruleProcess
	{ $current=$iv_ruleProcess.current; }
	EOF;

// Rule Process
ruleProcess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='process'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcessKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='description'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcessAccess().getDescriptionKeyword_3_0());
			}
			(
				(
					lv_description_4_0=RULE_STRING
					{
						newLeafNode(lv_description_4_0, grammarAccess.getProcessAccess().getDescriptionSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessRule());
						}
						setWithLastConsumed(
							$current,
							"description",
							lv_description_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getWorkdefinitionsWorkDefinitionParserRuleCall_4_0());
				}
				lv_workdefinitions_5_0=ruleWorkDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"workdefinitions",
						lv_workdefinitions_5_0,
						"simplepdl.xtext.SimplePDL.WorkDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getWorksequencesWorkSequenceParserRuleCall_5_0());
				}
				lv_worksequences_6_0=ruleWorkSequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"worksequences",
						lv_worksequences_6_0,
						"simplepdl.xtext.SimplePDL.WorkSequence");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getResourcesResourceParserRuleCall_6_0());
				}
				lv_resources_7_0=ruleResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"resources",
						lv_resources_7_0,
						"simplepdl.xtext.SimplePDL.Resource");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleWorkDefinition
entryRuleWorkDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkDefinitionRule()); }
	iv_ruleWorkDefinition=ruleWorkDefinition
	{ $current=$iv_ruleWorkDefinition.current; }
	EOF;

// Rule WorkDefinition
ruleWorkDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='workdefinition'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkDefinitionAccess().getWorkdefinitionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='description'
			{
				newLeafNode(otherlv_3, grammarAccess.getWorkDefinitionAccess().getDescriptionKeyword_3_0());
			}
			(
				(
					lv_description_4_0=RULE_STRING
					{
						newLeafNode(lv_description_4_0, grammarAccess.getWorkDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWorkDefinitionRule());
						}
						setWithLastConsumed(
							$current,
							"description",
							lv_description_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_5='assignedTo'
		{
			newLeafNode(otherlv_5, grammarAccess.getWorkDefinitionAccess().getAssignedToKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkDefinitionRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getWorkDefinitionAccess().getAssignedToHumanCrossReference_5_0());
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getWorkDefinitionAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWorkDefinitionRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getWorkDefinitionAccess().getAssignedToHumanCrossReference_6_1_0());
					}
				)
			)
		)*
		(
			otherlv_9='requiredMaterial'
			{
				newLeafNode(otherlv_9, grammarAccess.getWorkDefinitionAccess().getRequiredMaterialKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkDefinitionAccess().getRequiredMaterialsRequiredMaterialParserRuleCall_7_1_0());
					}
					lv_requiredMaterials_10_0=ruleRequiredMaterial
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkDefinitionRule());
						}
						add(
							$current,
							"requiredMaterials",
							lv_requiredMaterials_10_0,
							"simplepdl.xtext.SimplePDL.RequiredMaterial");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_11='linksToPredecessor'
			{
				newLeafNode(otherlv_11, grammarAccess.getWorkDefinitionAccess().getLinksToPredecessorKeyword_8_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWorkDefinitionRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getWorkDefinitionAccess().getPredecessorWorkDefinitionCrossReference_8_1_0());
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getWorkDefinitionAccess().getCommaKeyword_8_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getWorkDefinitionRule());
							}
						}
						otherlv_14=RULE_ID
						{
							newLeafNode(otherlv_14, grammarAccess.getWorkDefinitionAccess().getPredecessorWorkDefinitionCrossReference_8_2_1_0());
						}
					)
				)
			)*
			otherlv_15='['
			{
				newLeafNode(otherlv_15, grammarAccess.getWorkDefinitionAccess().getLeftSquareBracketKeyword_8_3());
			}
			otherlv_16='type'
			{
				newLeafNode(otherlv_16, grammarAccess.getWorkDefinitionAccess().getTypeKeyword_8_4());
			}
			otherlv_17='='
			{
				newLeafNode(otherlv_17, grammarAccess.getWorkDefinitionAccess().getEqualsSignKeyword_8_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkDefinitionAccess().getPredTypeWorkSequenceTypeEnumRuleCall_8_6_0());
					}
					lv_predType_18_0=ruleWorkSequenceType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkDefinitionRule());
						}
						set(
							$current,
							"predType",
							lv_predType_18_0,
							"simplepdl.xtext.SimplePDL.WorkSequenceType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_19=']'
			{
				newLeafNode(otherlv_19, grammarAccess.getWorkDefinitionAccess().getRightSquareBracketKeyword_8_7());
			}
		)?
		(
			otherlv_20='linksToSuccessor'
			{
				newLeafNode(otherlv_20, grammarAccess.getWorkDefinitionAccess().getLinksToSuccessorKeyword_9_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWorkDefinitionRule());
						}
					}
					otherlv_21=RULE_ID
					{
						newLeafNode(otherlv_21, grammarAccess.getWorkDefinitionAccess().getSuccessorWorkDefinitionCrossReference_9_1_0());
					}
				)
			)
			(
				otherlv_22=','
				{
					newLeafNode(otherlv_22, grammarAccess.getWorkDefinitionAccess().getCommaKeyword_9_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getWorkDefinitionRule());
							}
						}
						otherlv_23=RULE_ID
						{
							newLeafNode(otherlv_23, grammarAccess.getWorkDefinitionAccess().getSuccessorWorkDefinitionCrossReference_9_2_1_0());
						}
					)
				)
			)*
			otherlv_24='['
			{
				newLeafNode(otherlv_24, grammarAccess.getWorkDefinitionAccess().getLeftSquareBracketKeyword_9_3());
			}
			otherlv_25='type'
			{
				newLeafNode(otherlv_25, grammarAccess.getWorkDefinitionAccess().getTypeKeyword_9_4());
			}
			otherlv_26='='
			{
				newLeafNode(otherlv_26, grammarAccess.getWorkDefinitionAccess().getEqualsSignKeyword_9_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkDefinitionAccess().getSuccTypeWorkSequenceTypeEnumRuleCall_9_6_0());
					}
					lv_succType_27_0=ruleWorkSequenceType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkDefinitionRule());
						}
						set(
							$current,
							"succType",
							lv_succType_27_0,
							"simplepdl.xtext.SimplePDL.WorkSequenceType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_28=']'
			{
				newLeafNode(otherlv_28, grammarAccess.getWorkDefinitionAccess().getRightSquareBracketKeyword_9_7());
			}
		)?
		otherlv_29='}'
		{
			newLeafNode(otherlv_29, grammarAccess.getWorkDefinitionAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleWorkSequence
entryRuleWorkSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkSequenceRule()); }
	iv_ruleWorkSequence=ruleWorkSequence
	{ $current=$iv_ruleWorkSequence.current; }
	EOF;

// Rule WorkSequence
ruleWorkSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='worksequence'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkSequenceAccess().getWorksequenceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkSequenceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkSequenceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkSequenceAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='predecessor'
		{
			newLeafNode(otherlv_3, grammarAccess.getWorkSequenceAccess().getPredecessorKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkSequenceRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionCrossReference_4_0());
				}
			)
		)
		otherlv_5='successor'
		{
			newLeafNode(otherlv_5, grammarAccess.getWorkSequenceAccess().getSuccessorKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkSequenceRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionCrossReference_6_0());
				}
			)
		)
		otherlv_7='type'
		{
			newLeafNode(otherlv_7, grammarAccess.getWorkSequenceAccess().getTypeKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkSequenceAccess().getTypeWorkSequenceTypeEnumRuleCall_8_0());
				}
				lv_type_8_0=ruleWorkSequenceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkSequenceRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"simplepdl.xtext.SimplePDL.WorkSequenceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getWorkSequenceAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleRequiredMaterial
entryRuleRequiredMaterial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequiredMaterialRule()); }
	iv_ruleRequiredMaterial=ruleRequiredMaterial
	{ $current=$iv_ruleRequiredMaterial.current; }
	EOF;

// Rule RequiredMaterial
ruleRequiredMaterial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getRequiredMaterialAccess().getLeftSquareBracketKeyword_0());
		}
		otherlv_1='material'
		{
			newLeafNode(otherlv_1, grammarAccess.getRequiredMaterialAccess().getMaterialKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequiredMaterialRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRequiredMaterialAccess().getMaterialMaterialCrossReference_2_0());
				}
			)
		)
		(
			otherlv_3='quantity'
			{
				newLeafNode(otherlv_3, grammarAccess.getRequiredMaterialAccess().getQuantityKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getRequiredMaterialAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					lv_quantity_5_0=RULE_INT
					{
						newLeafNode(lv_quantity_5_0, grammarAccess.getRequiredMaterialAccess().getQuantityINTTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequiredMaterialRule());
						}
						setWithLastConsumed(
							$current,
							"quantity",
							lv_quantity_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getRequiredMaterialAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	iv_ruleResource=ruleResource
	{ $current=$iv_ruleResource.current; }
	EOF;

// Rule Resource
ruleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResourceAccess().getHumanParserRuleCall_0());
		}
		this_Human_0=ruleHuman
		{
			$current = $this_Human_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getResourceAccess().getMaterialParserRuleCall_1());
		}
		this_Material_1=ruleMaterial
		{
			$current = $this_Material_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHuman
entryRuleHuman returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHumanRule()); }
	iv_ruleHuman=ruleHuman
	{ $current=$iv_ruleHuman.current; }
	EOF;

// Rule Human
ruleHuman returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='human'
		{
			newLeafNode(otherlv_0, grammarAccess.getHumanAccess().getHumanKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getHumanAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHumanRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getHumanAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='email'
		{
			newLeafNode(otherlv_3, grammarAccess.getHumanAccess().getEmailKeyword_3());
		}
		(
			(
				lv_email_4_0=RULE_STRING
				{
					newLeafNode(lv_email_4_0, grammarAccess.getHumanAccess().getEmailSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHumanRule());
					}
					setWithLastConsumed(
						$current,
						"email",
						lv_email_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5='role'
		{
			newLeafNode(otherlv_5, grammarAccess.getHumanAccess().getRoleKeyword_5());
		}
		(
			(
				lv_role_6_0=RULE_STRING
				{
					newLeafNode(lv_role_6_0, grammarAccess.getHumanAccess().getRoleSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHumanRule());
					}
					setWithLastConsumed(
						$current,
						"role",
						lv_role_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getHumanAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleMaterial
entryRuleMaterial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaterialRule()); }
	iv_ruleMaterial=ruleMaterial
	{ $current=$iv_ruleMaterial.current; }
	EOF;

// Rule Material
ruleMaterial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='material'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaterialAccess().getMaterialKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMaterialAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaterialRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMaterialAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='unit'
		{
			newLeafNode(otherlv_3, grammarAccess.getMaterialAccess().getUnitKeyword_3());
		}
		(
			(
				lv_unit_4_0=RULE_STRING
				{
					newLeafNode(lv_unit_4_0, grammarAccess.getMaterialAccess().getUnitSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaterialRule());
					}
					setWithLastConsumed(
						$current,
						"unit",
						lv_unit_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getMaterialAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Rule WorkSequenceType
ruleWorkSequenceType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='startToStart'
			{
				$current = grammarAccess.getWorkSequenceTypeAccess().getStartToStartEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getWorkSequenceTypeAccess().getStartToStartEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='finishToStart'
			{
				$current = grammarAccess.getWorkSequenceTypeAccess().getFinishToStartEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getWorkSequenceTypeAccess().getFinishToStartEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='startToFinish'
			{
				$current = grammarAccess.getWorkSequenceTypeAccess().getStartToFinishEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getWorkSequenceTypeAccess().getStartToFinishEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='finishToFinish'
			{
				$current = grammarAccess.getWorkSequenceTypeAccess().getFinishToFinishEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getWorkSequenceTypeAccess().getFinishToFinishEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
